# -*- mode: ruby -*-
# vi: set ft=ruby :

# Vagrant + Ansible Setup

# All Vagrant configuration is done below. The "2" in Vagrant.configure
# configures the configuration version (we support older styles for
# backwards compatibility). Please don't change it unless you know what
# you're doing.
Vagrant.configure("2") do |config|
  # The most common configuration options are documented and commented below.
  # For a complete reference, please see the online documentation at
  # https://docs.vagrantup.com.

  # Every Vagrant development environment requires a box. You can search for
  # boxes at https://vagrantcloud.com/search.
  # config.vm.box = "hashicorp/bionic64"
  config.vm.box = "ubuntu/bionic64"
  config.vm.box_version = "20181024.0.0"
  
  # If planning to clone down lots of large repos inside uncomment this line and ensure disk-resize is installed with `vagrant plugin install vagrant-disksize`
  # Also ensure the disk mount from host to guest is commented out which is further below
  # config.disksize.size = '100GB'
  
  # config.ssh.insert_key = false
  # config.ssh.username = "ubuntu"
  #config.ssh.password = "ubuntu"
  config.vm.hostname = "dev-ubuntu"

  # Disable automatic box update checking. If you disable this, then
  # boxes will only be checked for updates when the user runs
  # `vagrant box outdated`. This is not recommended.
  # config.vm.box_check_update = false

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine. In the example below,
  # accessing "localhost:8080" will access port 80 on the guest machine.
  # NOTE: This will enable public access to the opened port
  # config.vm.network "forwarded_port", guest: 80, host: 8080
  config.vm.network "forwarded_port", guest: 443, host: 8443
  config.vm.network "forwarded_port", guest: 443, host: 443
  config.vm.network "forwarded_port", guest: 22, host: 10023
  config.vm.network "forwarded_port", guest: 5671, host: 5671
  config.vm.network "forwarded_port", guest: 15671, host: 15671
  config.vm.network "forwarded_port", guest: 5432, host: 5432
  config.vm.network "forwarded_port", guest: 1922, host: 1922
  config.vm.network "forwarded_port", guest: 6379, host: 6379

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine and only allow access
  # via 127.0.0.1 to disable public access
  # config.vm.network "forwarded_port", guest: 80, host: 8080, host_ip: "127.0.0.1"
  

  # Create a private network, which allows host-only access to the machine
  # using a specific IP.
  # config.vm.network "private_network", ip: "192.168.68.145"

  # Create a public network, which generally matched to bridged network.
  # Bridged networks make the machine appear as another physical device on
  # your network.
  # config.vm.network "public_network"

  # Share an additional folder to the guest VM. The first argument is
  # the path on the host to the actual folder. The second argument is
  # the path on the guest to mount the folder. And the optional third
  # argument is a set of non-required options.
  
  # If you have an existing project ~/someproject you can mount it vs recloning it all again like this. Ensure you update the path to your specific path. 
  # Reference: https://www.vagrantup.com/docs/synced-folders/basic_usage
  # config.vm.synced_folder "/home/cooluser/Documents/dev/someproject", "/home/ubuntu/someproject",
  #  owner: "ubuntu", group: "ubuntu"

  # Provider-specific configuration so you can fine-tune various
  # backing providers for Vagrant. These expose provider-specific options.
  # Example for VirtualBox:
  #
  # config.vm.provider "virtualbox" do |vb|
  #   # Display the VirtualBox GUI when booting the machine
  #   vb.gui = true
  #
  #   # Customize the amount of memory on the VM:
  #   vb.memory = "1024"
  # end
  #
  # View the documentation for the provider you are using for more
  # information on available options.
  # https://www.vagrantup.com/docs/providers/virtualbox/configuration
  config.vm.provider "virtualbox" do |vb|
      # Display the VirtualBox GUI when booting the machine
      vb.gui = true
      # Customize the amount of memory on the VM:
      # vb.memory = "4096" # needed to run engine
      vb.memory = "8196" # min recommended needed to build console
      # vb.memory = "16384" # high performance optional mode
      vb.cpus = 4
      vb.name = "DevUbuntuAnsibleAdvancedLocal"
      # vb.linked_clone = true
  end
  
  # # libvirt
  # config.vm.provider "libvirt" do |lv|
  #   lv.cpus = 2
  #   lv.memory = 2048
  #   # libvirt.qemu_use_session = false
  # end

  # # hyper-v
  # config.vm.provider "hyperv" do |hv|
  #   hv.cpus = 2
  #   hv.memory = "1024"
  #   hv.maxmemory = "2048"
  #   hv.linked_clone = true
  # end
  
  
  $script = <<-SCRIPT
  if [ ! -f /vagrant/id_rsa_dev ]; then 
    ssh-keygen -b 4096 -f /vagrant/id_rsa_dev -t rsa -q -N ''; 
  else 
    echo "SSH Keypair Exists skipping creation"; fi
  SCRIPT

  Vagrant.configure("2") do |config|
    config.vm.provision "shell", inline: $script
  end
  
  
  # https://www.packetswitch.co.uk/using-ansible-with-vagrant/
  config.vm.provision "ansible_local" do |ansible|
    ansible.playbook = "playbook.yml"
    ansible.install_mode = "default"
    ansible.limit = "all,localhost"
    # ansible.version = "2.2.1.0"
  end

  # Enable provisioning with a shell script. Additional provisioners such as
  # Ansible, Chef, Docker, Puppet and Salt are also available. Please see the
  # documentation for more information about their specific syntax and use.
  config.vm.provision "shell", inline: <<-SHELL
    # SPECIAL NOTE: This stuff all runs as the "vagrant" user 
    # This requires extra work to set proper permissions and ownership if not executed as the desired user via su 
    export TZ=UTC
    ln -snf /usr/share/zoneinfo/$TZ /etc/localtime && echo $TZ > /etc/timezone
    export DEBIAN_FRONTEND=noninteractive
    export LC_ALL=en_US.UTF-8
    export LANG=en_US.UTF-8
    export LANGUAGE=en_US.UTF-8
    # apt-get update -y && apt-get upgrade -y
    # apt-get install -y curl git sudo dnsutils lsb-release wget iproute2 telnet net-tools apt-utils debconf-utils gnupg gnupg2 ca-certificates software-properties-common locales locales-all openssh-server
    # wget -q --content-disposition https://packagecloud.io/github/git-lfs/packages/ubuntu/bionic/git-lfs_3.0.2_amd64.deb/download.deb && sudo dpkg -i git-lfs_3.0.2_amd64.deb
    # curl -s https://raw.githubusercontent.com/profclems/glab/trunk/scripts/install.sh | sudo sh
    # sh -c "$(curl -fsSL https://starship.rs/install.sh)" -- --yes
    # Alternate inline shell ways to do some of the same things but way hackier
    # sudo useradd -m ubuntu -s /bin/bash
    echo "Setting ubuntu user's password to 'ubuntu'"
    chpasswd <<<"ubuntu:ubuntu"

    # sudo mkdir -p /home/ubuntu/.ssh
    # sudo mkdir -p /home/ubuntu/.config/
    # sudo mkdir -p /home/ubuntu/someproject/
    # sudo cp /vagrant/dotfiles/.bashrc /home/ubuntu/.bashrc
    # sudo cp /vagrant/dotfiles/.git-credentials /home/ubuntu/.git-credentials
    # sudo cp /vagrant/dotfiles/.gitconfig /home/ubuntu/.gitconfig
    # sudo cp /vagrant/dotfiles/starship.toml /home/ubuntu/.config/starship.toml
    #cat /vagrant/id_rsa.pub | sudo tee -a /home/ubuntu/.ssh/authorized_keys
    #cat /vagrant/id_rsa_dev.pub | sudo tee -a /home/ubuntu/.ssh/authorized_keys
    #sudo chmod 600 /home/ubuntu/.ssh/authorized_keys
    #sudo chmod 700 /home/ubuntu/.ssh
    #sudo chown -R ubuntu /home/ubuntu
    #echo "%ubuntu  ALL=(ALL) NOPASSWD:ALL" | sudo tee /etc/sudoers.d/ubuntu
    # su -c "sudo apt install -y fonts-firacode fontconfig; wget -q https://github.com/ryanoasis/nerd-fonts/releases/download/v2.1.0/FiraCode.zip && unzip -o FiraCode.zip -d /home/ubuntu/.fonts && fc-cache -fv ;" ubuntu
    # uncomment the below line if planning to clone all repos vs mounting them.
    # su -c 'git clone https://somecoolrepowouldbere -b feature_branch ~/project && cd ~/project && git lfs fetch && git lfs checkout' ubuntu
  SHELL
end